
==================== FINAL INTERFACE ====================
2017-12-05 08:35:34.5978565 UTC

interface main@main:Main 8002
  interface hash: 26dac166800fc7936677e9881051ddb2
  ABI hash: 42a0b43668847dabf9afcc2f5331dfad
  export-list hash: 1c726c69771ef27b28822b1e258f8662
  orphan hash: 933c222a0b4e722a9ab3ba4bdc50ebaa
  flag hash: 3e09b0975889e3386ce697a9b4e96ea3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.aveRemoving
  Main.aveSpotRemoveMatchesFrom
  Main.aveTripRemoveMatchesFrom
  Main.averageizeAllTrips
  Main.fileLoc
  Main.fromEither
  Main.getTrips
  Main.getall
  Main.main
  Main.mkFilter
  Main.removeFromTrips
  Main.removeSpots
  Main.serveIndex
  Main.test
  Main.testAverage
  Main.toSegments
  Main.toSegments_
  Main.tripListToSpotList
  Main.tripListToSpotList'
  Main.writeOutAverage
module dependencies:
package dependencies: Win32-2.3.1.1@Win32-2.3.1.1
                      aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1
                      appar-0.1.4@appar-0.1.4-DGWHHt2WRn9FI49prcwO9
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-8yywY4inVGRLJSCg60gBXj
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      auto-update-0.1.4@auto-update-0.1.4-EmUvNdmhEju51bHrtaEMpz
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-m1TEyTenyr5nJN40TpHVj
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-LxClHUTiKUUAxWtvJ5Oeoy
                      byteorder-1.0.4@byteorder-1.0.4-9NlNHkBVdo7F1prFVKrkcH
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.10@case-insensitive-1.2.0.10-1D5OUKQ7UrJ7IpOe0di4Un
                      containers-0.5.7.1@containers-0.5.7.1
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      http-date-0.0.6.1@http-date-0.0.6.1-AkYFHBFn90lGSerD29arC9
                      http-types-0.9.1@http-types-0.9.1-G7E1zHPzooHCYxKqGuQmxY
                      http2-1.6.3@http2-1.6.3-5WuWRsIVuKR43Sq9Cs2O4Z integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      iproute-1.7.1@iproute-1.7.1-9BRunn4fZ2LJijFUX0wAoi
                      lifted-base-0.2.3.11@lifted-base-0.2.3.11-Ei0JSPdt7KOCD2HIA5jFqV
                      mmorph-1.0.9@mmorph-1.0.9-5bASEvmIkr5CpdAYXwPsn0
                      monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-2.6.3.2@network-2.6.3.2-F0OcsS89osODGCGHNf1FTk
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      psqueues-0.2.4.0@psqueues-0.2.4.0-CvAhEbuBRGQCwl61vq8zYS
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-compat-0.95.1@regex-compat-0.95.1-7IGKoiHTSKL3opdpEZ0pO8
                      regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO
                      resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      scotty-0.11.0@scotty-0.11.0-EOIWBt1sJKE5bnyztqsKM6
                      server-0.1.0.1@server-0.1.0.1-A87ge1buU3B90FB70286D6
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      streaming-commons-0.1.17@streaming-commons-0.1.17-8Q1MsGyzrPPGgHz2C1BSr4
                      stringsearch-0.3.6.6@stringsearch-0.3.6.6-2soGORichTR6reHVhDqKip
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-GKSs0LKukAL8ymq2naFmrH
                      unix-compat-0.4.3.1@unix-compat-0.4.3.1-4J6CourUSTG17Ll1LWtjiq
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vault-0.3.0.7@vault-0.3.0.7-FSJCPczyPWW8DwvwP76qt4
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
                      wai-3.2.1.1@wai-3.2.1.1-9FGPcqW2iUN5VP944fCq2b
                      wai-extra-3.0.20.0@wai-extra-3.0.20.0-DjtZKm5ghBID2F1FaXN885
                      warp-3.2.13@warp-3.2.13-JeA4XUH1GfPICGzPbFBDHD
                      word8-0.1.3@word8-0.1.3-9o1uWQQ6KysJq8GGsVHHit
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         network-2.6.3.2@network-2.6.3.2-F0OcsS89osODGCGHNf1FTk:Network.Socket
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.String
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         iproute-1.7.1@iproute-1.7.1-9BRunn4fZ2LJijFUX0wAoi:Data.IP.Addr
                         iproute-1.7.1@iproute-1.7.1-9BRunn4fZ2LJijFUX0wAoi:Data.IP.Range
                         monad-control-1.0.2.2@monad-control-1.0.2.2-1Ci8dYJ8Tb7E3HTcTqOb8l:Control.Monad.Trans.Control
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         resourcet-1.1.9@resourcet-1.1.9-L2BUQrxWZMwDiwhcuyPuNi:Control.Monad.Trans.Resource.Internal
                         scotty-0.11.0@scotty-0.11.0-EOIWBt1sJKE5bnyztqsKM6:Web.Scotty.Internal.Types
                         server-0.1.0.1@server-0.1.0.1-A87ge1buU3B90FB70286D6:Datas
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1:Data.Aeson 2c2ea416ea3f3f7ead4fbc7d22c60646
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1:Data.Aeson.Text ac2e4cc2a1fa817e783d39f0b8a4fb36
import  -/  base-4.9.1.0:Control.Concurrent e3f6962e2eee72e46a7f524818b5ed3e
import  -/  base-4.9.1.0:Data.Either 186ef9adf6b47e24f39efe9b2e18e352
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.Function e669266e2bc3ac37fceae74061959895
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.Maybe ecf0c6f81372d9b58b142d5e758ea51b
import  -/  base-4.9.1.0:Data.Monoid 57d0116342e60080b20e7d5f9e1248f9
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:Data.Traversable 078621b399ac9374b02f3f2ce55a08e9
import  -/  base-4.9.1.0:Data.Tuple b07f695e7ce8fe20cc8a32abf62f60ec
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Generics 87e8d511f978e043d53db008cc403901
import  -/  base-4.9.1.0:GHC.IO 4d461f9283683225c61e68db403481ad
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.Environment 438c0b0bc0f94461b9c946d062a7eab9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  base-4.9.1.0:System.IO.Unsafe 85e403e78a5719b31218fdadc4670d75
import  -/  base-4.9.1.0:Text.Read 3cc85705eeac93ec93da7f5edfd7bc15
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy a933f8de698ac656298f2d79daa92bb5
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base dfcca0a6b3fe956067f7db6df4d400c2
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 5978345e8d03c94ea37df1bd4052990d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set 3ed2324fd1e757464a8ac2b636a64e5a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base 7066127ea77dde3a5a3f19fd2ed3d39a
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 4f448ef742f586f293d03ae3d978f8f8
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  scotty-0.11.0@scotty-0.11.0-EOIWBt1sJKE5bnyztqsKM6:Web.Scotty 2928e0504c768eccc8363609218c18d4
import  -/  server-0.1.0.1@server-0.1.0.1-A87ge1buU3B90FB70286D6:Datas be98e238c7a6e3054e3142e3d6e93b2b
import  -/  server-0.1.0.1@server-0.1.0.1-A87ge1buU3B90FB70286D6:Lib 87028ea10753ca019156ef89590c2c0c
import  -/  server-0.1.0.1@server-0.1.0.1-A87ge1buU3B90FB70286D6:Summary 29566ed8eaa5394707368a9ba1937fb2
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy 0d4f384c6b6f54adb3bace8ee2df2f42
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy.IO 3684544ba74554e780a58302484f8353
f78c6649aee5f57e0c5bcfcaa857f2d3
  $s$fParsable[] :: Web.Scotty.Action.Parsable [GHC.Types.Char]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  Web.Scotty.Action.$fParsableChar_$cparseParamList
                  (Web.Scotty.Action.$fParsable[]_$cparseParamList
                     @ GHC.Types.Char
                     Web.Scotty.Action.$fParsableChar) -}
182794ff83ca6dc3ded93fef68cba34f
  $s$fToJSON[] ::
    Data.Aeson.Types.ToJSON.ToJSON [GHC.Base.Maybe Datas.Trip]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Base.Maybe Datas.Trip]
                  (\ (eta :: [GHC.Base.Maybe Datas.Trip]) ->
                   case Data.Vector.Generic.new
                          @ Data.Vector.Vector
                          @ Data.Aeson.Types.Internal.Value
                          (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                          (Data.Vector.Generic.New.unstream
                             @ Data.Vector.Vector
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                             (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                @ Data.Vector.Fusion.Util.Id
                                @ Data.Aeson.Types.Internal.Value
                                @ Data.Vector.Vector
                                Data.Vector.Fusion.Util.$fMonadId
                                Data.Vector.Fusion.Bundle.Size.Unknown
                                (GHC.Base.build
                                   @ Data.Aeson.Types.Internal.Value
                                   (\ @ b1
                                      (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                      (n :: b1)[OneShot] ->
                                    GHC.Base.foldr
                                      @ (GHC.Base.Maybe Datas.Trip)
                                      @ b1
                                      (GHC.Base.mapFB
                                         @ Data.Aeson.Types.Internal.Value
                                         @ b1
                                         @ (GHC.Base.Maybe Datas.Trip)
                                         c
                                         (\ (eta1 :: GHC.Base.Maybe Datas.Trip) ->
                                          case eta1 of wild {
                                            GHC.Base.Nothing -> Data.Aeson.Types.Internal.Null
                                            GHC.Base.Just a1 -> Datas.$fToJSONTrip_$ctoJSON a1 }))
                                      n
                                      eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                   Data.Aeson.Types.Internal.Array dt1 })
                  (\ (eta :: [GHC.Base.Maybe Datas.Trip]) ->
                   let {
                     ds4 :: GHC.Base.Maybe Datas.Trip
                            -> Data.Aeson.Encoding.Internal.Encoding
                       {- Arity: 1 -}
                     = \ (eta1 :: GHC.Base.Maybe Datas.Trip) ->
                       case eta1 of wild {
                         GHC.Base.Nothing -> Data.Aeson.Encoding.Internal.null_
                         GHC.Base.Just a1
                         -> Data.Aeson.Encoding.Internal.value
                              (Datas.$fToJSONTrip_$ctoJSON a1) }
                   } in
                   case eta of wild {
                     [] -> Data.Aeson.Encoding.Internal.emptyArray_
                     : x xs
                     -> (Data.ByteString.Builder.Internal.append
                           (Data.Aeson.Encoding.Internal.openBracket
                              @ Data.Aeson.Types.Internal.Value)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)
                           (Data.ByteString.Builder.Internal.append
                              (ds4 x)
                                `cast`
                              (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                   <Data.Aeson.Types.Internal.Value>_P)
                              (Data.ByteString.Builder.Internal.append
                                 (GHC.Base.foldr
                                    @ (GHC.Base.Maybe Datas.Trip)
                                    @ (Data.Aeson.Encoding.Internal.Encoding'
                                         Data.Aeson.Types.Internal.Value)
                                    (\ (v :: GHC.Base.Maybe Datas.Trip)
                                       (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                                Data.Aeson.Types.Internal.Value)[OneShot] ->
                                     Data.ByteString.Builder.Internal.append
                                       (Data.Aeson.Encoding.Internal.comma
                                          @ Data.Aeson.Types.Internal.Value)
                                         `cast`
                                       (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                            <Data.Aeson.Types.Internal.Value>_P)
                                       (Data.ByteString.Builder.Internal.append
                                          (ds4 v)
                                            `cast`
                                          (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                               <Data.Aeson.Types.Internal.Value>_P)
                                          vs
                                            `cast`
                                          (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                               <Data.Aeson.Types.Internal.Value>_P)))
                                      `cast`
                                    (<GHC.Base.Maybe Datas.Trip>_R
                                     ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                             Data.Aeson.Types.Internal.Value>_R
                                     ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                   <Data.Aeson.Types.Internal.Value>_P))
                                    (Data.Aeson.Encoding.Internal.empty
                                       @ Data.Aeson.Types.Internal.Value)
                                    xs)
                                   `cast`
                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Types.Internal.Value>_P)
                                 (Data.Aeson.Encoding.Internal.closeBracket
                                    @ Data.Aeson.Types.Internal.Value)
                                   `cast`
                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Types.Internal.Value>_P))))
                          `cast`
                        (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                  <Data.Aeson.Types.Internal.Value>_P)) })
                  (\ (eta :: [[GHC.Base.Maybe Datas.Trip]]) ->
                   case Data.Vector.Generic.new
                          @ Data.Vector.Vector
                          @ Data.Aeson.Types.Internal.Value
                          (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                          (Data.Vector.Generic.New.unstream
                             @ Data.Vector.Vector
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                             (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                @ Data.Vector.Fusion.Util.Id
                                @ Data.Aeson.Types.Internal.Value
                                @ Data.Vector.Vector
                                Data.Vector.Fusion.Util.$fMonadId
                                Data.Vector.Fusion.Bundle.Size.Unknown
                                (GHC.Base.build
                                   @ Data.Aeson.Types.Internal.Value
                                   (\ @ b1
                                      (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                      (n :: b1)[OneShot] ->
                                    GHC.Base.foldr
                                      @ [GHC.Base.Maybe Datas.Trip]
                                      @ b1
                                      (GHC.Base.mapFB
                                         @ Data.Aeson.Types.Internal.Value
                                         @ b1
                                         @ [GHC.Base.Maybe Datas.Trip]
                                         c
                                         (\ (eta1 :: [GHC.Base.Maybe Datas.Trip]) ->
                                          case Data.Vector.Generic.new
                                                 @ Data.Vector.Vector
                                                 @ Data.Aeson.Types.Internal.Value
                                                 (Data.Vector.$fVectorVectora
                                                    @ Data.Aeson.Types.Internal.Value)
                                                 (Data.Vector.Generic.New.unstream
                                                    @ Data.Vector.Vector
                                                    @ Data.Aeson.Types.Internal.Value
                                                    (Data.Vector.$fVectorVectora
                                                       @ Data.Aeson.Types.Internal.Value)
                                                    (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                       @ Data.Vector.Fusion.Util.Id
                                                       @ Data.Aeson.Types.Internal.Value
                                                       @ Data.Vector.Vector
                                                       Data.Vector.Fusion.Util.$fMonadId
                                                       Data.Vector.Fusion.Bundle.Size.Unknown
                                                       (GHC.Base.build
                                                          @ Data.Aeson.Types.Internal.Value
                                                          (\ @ b2
                                                             (c1 :: Data.Aeson.Types.Internal.Value
                                                                    -> b2 -> b2)[OneShot]
                                                             (n1 :: b2)[OneShot] ->
                                                           GHC.Base.foldr
                                                             @ (GHC.Base.Maybe Datas.Trip)
                                                             @ b2
                                                             (GHC.Base.mapFB
                                                                @ Data.Aeson.Types.Internal.Value
                                                                @ b2
                                                                @ (GHC.Base.Maybe Datas.Trip)
                                                                c1
                                                                (\ (eta2 :: GHC.Base.Maybe
                                                                              Datas.Trip) ->
                                                                 case eta2 of wild {
                                                                   GHC.Base.Nothing
                                                                   -> Data.Aeson.Types.Internal.Null
                                                                   GHC.Base.Just a1
                                                                   -> Datas.$fToJSONTrip_$ctoJSON
                                                                        a1 }))
                                                             n1
                                                             eta1)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                          Data.Aeson.Types.Internal.Array dt1 }))
                                      n
                                      eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                   Data.Aeson.Types.Internal.Array dt1 })
                  (\ (eta :: [[GHC.Base.Maybe Datas.Trip]]) ->
                   let {
                     ds4 :: [GHC.Base.Maybe Datas.Trip]
                            -> Data.Aeson.Encoding.Internal.Encoding
                       {- Arity: 1 -}
                     = \ (eta1 :: [GHC.Base.Maybe Datas.Trip]) ->
                       let {
                         ds5 :: GHC.Base.Maybe Datas.Trip
                                -> Data.Aeson.Encoding.Internal.Encoding
                           {- Arity: 1 -}
                         = \ (eta2 :: GHC.Base.Maybe Datas.Trip) ->
                           case eta2 of wild {
                             GHC.Base.Nothing -> Data.Aeson.Encoding.Internal.null_
                             GHC.Base.Just a1
                             -> Data.Aeson.Encoding.Internal.value
                                  (Datas.$fToJSONTrip_$ctoJSON a1) }
                       } in
                       case eta1 of wild {
                         [] -> Data.Aeson.Encoding.Internal.emptyArray_
                         : x xs
                         -> (Data.ByteString.Builder.Internal.append
                               (Data.Aeson.Encoding.Internal.openBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.ByteString.Builder.Internal.append
                                  (ds5 x)
                                    `cast`
                                  (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                       <Data.Aeson.Types.Internal.Value>_P)
                                  (Data.ByteString.Builder.Internal.append
                                     (GHC.Base.foldr
                                        @ (GHC.Base.Maybe Datas.Trip)
                                        @ (Data.Aeson.Encoding.Internal.Encoding'
                                             Data.Aeson.Types.Internal.Value)
                                        (\ (v :: GHC.Base.Maybe Datas.Trip)
                                           (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                                    Data.Aeson.Types.Internal.Value)[OneShot] ->
                                         Data.ByteString.Builder.Internal.append
                                           (Data.Aeson.Encoding.Internal.comma
                                              @ Data.Aeson.Types.Internal.Value)
                                             `cast`
                                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                <Data.Aeson.Types.Internal.Value>_P)
                                           (Data.ByteString.Builder.Internal.append
                                              (ds5 v)
                                                `cast`
                                              (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                   <Data.Aeson.Types.Internal.Value>_P)
                                              vs
                                                `cast`
                                              (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                   <Data.Aeson.Types.Internal.Value>_P)))
                                          `cast`
                                        (<GHC.Base.Maybe Datas.Trip>_R
                                         ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                                 Data.Aeson.Types.Internal.Value>_R
                                         ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                       <Data.Aeson.Types.Internal.Value>_P))
                                        (Data.Aeson.Encoding.Internal.empty
                                           @ Data.Aeson.Types.Internal.Value)
                                        xs)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.Aeson.Encoding.Internal.closeBracket
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P))))
                              `cast`
                            (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Types.Internal.Value>_P)) }
                   } in
                   case eta of wild {
                     [] -> Data.Aeson.Encoding.Internal.emptyArray_
                     : x xs
                     -> (Data.ByteString.Builder.Internal.append
                           (Data.Aeson.Encoding.Internal.openBracket
                              @ Data.Aeson.Types.Internal.Value)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)
                           (Data.ByteString.Builder.Internal.append
                              (ds4 x)
                                `cast`
                              (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                   <Data.Aeson.Types.Internal.Value>_P)
                              (Data.ByteString.Builder.Internal.append
                                 (GHC.Base.foldr
                                    @ [GHC.Base.Maybe Datas.Trip]
                                    @ (Data.Aeson.Encoding.Internal.Encoding'
                                         Data.Aeson.Types.Internal.Value)
                                    (\ (v :: [GHC.Base.Maybe Datas.Trip])
                                       (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                                Data.Aeson.Types.Internal.Value)[OneShot] ->
                                     Data.ByteString.Builder.Internal.append
                                       (Data.Aeson.Encoding.Internal.comma
                                          @ Data.Aeson.Types.Internal.Value)
                                         `cast`
                                       (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                            <Data.Aeson.Types.Internal.Value>_P)
                                       (Data.ByteString.Builder.Internal.append
                                          (ds4 v)
                                            `cast`
                                          (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                               <Data.Aeson.Types.Internal.Value>_P)
                                          vs
                                            `cast`
                                          (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                               <Data.Aeson.Types.Internal.Value>_P)))
                                      `cast`
                                    (<[GHC.Base.Maybe Datas.Trip]>_R
                                     ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                             Data.Aeson.Types.Internal.Value>_R
                                     ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                   <Data.Aeson.Types.Internal.Value>_P))
                                    (Data.Aeson.Encoding.Internal.empty
                                       @ Data.Aeson.Types.Internal.Value)
                                    xs)
                                   `cast`
                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Types.Internal.Value>_P)
                                 (Data.Aeson.Encoding.Internal.closeBracket
                                    @ Data.Aeson.Types.Internal.Value)
                                   `cast`
                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Types.Internal.Value>_P))))
                          `cast`
                        (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                  <Data.Aeson.Types.Internal.Value>_P)) }) -}
03484c1a5a749551075e7b5e21a39335
  $s$fToJSON[]1 :: Data.Aeson.Types.ToJSON.ToJSON [Datas.Trip]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Datas.Trip]
                  Datas.$fToJSONTrip_$ctoJSONList
                  Datas.$fToJSONTrip_$ctoEncodingList
                  (\ (eta :: [[Datas.Trip]]) ->
                   case Data.Vector.Generic.new
                          @ Data.Vector.Vector
                          @ Data.Aeson.Types.Internal.Value
                          (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                          (Data.Vector.Generic.New.unstream
                             @ Data.Vector.Vector
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                             (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                @ Data.Vector.Fusion.Util.Id
                                @ Data.Aeson.Types.Internal.Value
                                @ Data.Vector.Vector
                                Data.Vector.Fusion.Util.$fMonadId
                                Data.Vector.Fusion.Bundle.Size.Unknown
                                (GHC.Base.build
                                   @ Data.Aeson.Types.Internal.Value
                                   (\ @ b1
                                      (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                      (n :: b1)[OneShot] ->
                                    GHC.Base.foldr
                                      @ [Datas.Trip]
                                      @ b1
                                      (GHC.Base.mapFB
                                         @ Data.Aeson.Types.Internal.Value
                                         @ b1
                                         @ [Datas.Trip]
                                         c
                                         Datas.$fToJSONTrip_$ctoJSONList)
                                      n
                                      eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                   Data.Aeson.Types.Internal.Array dt1 })
                  (\ (eta :: [[Datas.Trip]]) ->
                   case eta of wild {
                     [] -> Data.Aeson.Encoding.Internal.emptyArray_
                     : x xs
                     -> (Data.ByteString.Builder.Internal.append
                           (Data.Aeson.Encoding.Internal.openBracket
                              @ Data.Aeson.Types.Internal.Value)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)
                           (Data.ByteString.Builder.Internal.append
                              (case x of wild1 {
                                 []
                                 -> Data.Aeson.Encoding.Internal.emptyArray_
                                      `cast`
                                    (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                         <Data.Aeson.Types.Internal.Value>_P)
                                 : x1 xs1
                                 -> Data.ByteString.Builder.Internal.append
                                      (Data.Aeson.Encoding.Internal.openBracket
                                         @ Data.Aeson.Types.Internal.Value)
                                        `cast`
                                      (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                           <Data.Aeson.Types.Internal.Value>_P)
                                      (Data.ByteString.Builder.Internal.append
                                         (Data.Aeson.Encoding.Internal.value
                                            (Datas.$fToJSONTrip_$ctoJSON x1))
                                           `cast`
                                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                              <Data.Aeson.Types.Internal.Value>_P)
                                         (Data.ByteString.Builder.Internal.append
                                            (GHC.Base.foldr
                                               @ Datas.Trip
                                               @ (Data.Aeson.Encoding.Internal.Encoding'
                                                    Data.Aeson.Types.Internal.Value)
                                               (\ (v :: Datas.Trip)
                                                  (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                                           Data.Aeson.Types.Internal.Value)[OneShot] ->
                                                Data.ByteString.Builder.Internal.append
                                                  (Data.Aeson.Encoding.Internal.comma
                                                     @ Data.Aeson.Types.Internal.Value)
                                                    `cast`
                                                  (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                       <Data.Aeson.Types.Internal.Value>_P)
                                                  (Data.ByteString.Builder.Internal.append
                                                     (Data.Aeson.Encoding.Internal.value
                                                        (Datas.$fToJSONTrip_$ctoJSON v))
                                                       `cast`
                                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                          <Data.Aeson.Types.Internal.Value>_P)
                                                     vs
                                                       `cast`
                                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                          <Data.Aeson.Types.Internal.Value>_P)))
                                                 `cast`
                                               (<Datas.Trip>_R
                                                ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                                        Data.Aeson.Types.Internal.Value>_R
                                                ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                              <Data.Aeson.Types.Internal.Value>_P))
                                               (Data.Aeson.Encoding.Internal.empty
                                                  @ Data.Aeson.Types.Internal.Value)
                                               xs1)
                                              `cast`
                                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P)
                                            (Data.Aeson.Encoding.Internal.closeBracket
                                               @ Data.Aeson.Types.Internal.Value)
                                              `cast`
                                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))) })
                              (Data.ByteString.Builder.Internal.append
                                 (GHC.Base.foldr
                                    @ [Datas.Trip]
                                    @ (Data.Aeson.Encoding.Internal.Encoding'
                                         Data.Aeson.Types.Internal.Value)
                                    (\ (v :: [Datas.Trip])
                                       (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                                Data.Aeson.Types.Internal.Value)[OneShot] ->
                                     Data.ByteString.Builder.Internal.append
                                       (Data.Aeson.Encoding.Internal.comma
                                          @ Data.Aeson.Types.Internal.Value)
                                         `cast`
                                       (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                            <Data.Aeson.Types.Internal.Value>_P)
                                       (Data.ByteString.Builder.Internal.append
                                          (case v of wild1 {
                                             []
                                             -> Data.Aeson.Encoding.Internal.emptyArray_
                                                  `cast`
                                                (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                     <Data.Aeson.Types.Internal.Value>_P)
                                             : x1 xs1
                                             -> Data.ByteString.Builder.Internal.append
                                                  (Data.Aeson.Encoding.Internal.openBracket
                                                     @ Data.Aeson.Types.Internal.Value)
                                                    `cast`
                                                  (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                       <Data.Aeson.Types.Internal.Value>_P)
                                                  (Data.ByteString.Builder.Internal.append
                                                     (Data.Aeson.Encoding.Internal.value
                                                        (Datas.$fToJSONTrip_$ctoJSON x1))
                                                       `cast`
                                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                          <Data.Aeson.Types.Internal.Value>_P)
                                                     (Data.ByteString.Builder.Internal.append
                                                        (GHC.Base.foldr
                                                           @ Datas.Trip
                                                           @ (Data.Aeson.Encoding.Internal.Encoding'
                                                                Data.Aeson.Types.Internal.Value)
                                                           (\ (v1 :: Datas.Trip)
                                                              (vs1 :: Data.Aeson.Encoding.Internal.Encoding'
                                                                        Data.Aeson.Types.Internal.Value)[OneShot] ->
                                                            Data.ByteString.Builder.Internal.append
                                                              (Data.Aeson.Encoding.Internal.comma
                                                                 @ Data.Aeson.Types.Internal.Value)
                                                                `cast`
                                                              (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                   <Data.Aeson.Types.Internal.Value>_P)
                                                              (Data.ByteString.Builder.Internal.append
                                                                 (Data.Aeson.Encoding.Internal.value
                                                                    (Datas.$fToJSONTrip_$ctoJSON
                                                                       v1))
                                                                   `cast`
                                                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                      <Data.Aeson.Types.Internal.Value>_P)
                                                                 vs1
                                                                   `cast`
                                                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                      <Data.Aeson.Types.Internal.Value>_P)))
                                                             `cast`
                                                           (<Datas.Trip>_R
                                                            ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                                                    Data.Aeson.Types.Internal.Value>_R
                                                            ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                          <Data.Aeson.Types.Internal.Value>_P))
                                                           (Data.Aeson.Encoding.Internal.empty
                                                              @ Data.Aeson.Types.Internal.Value)
                                                           xs1)
                                                          `cast`
                                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                             <Data.Aeson.Types.Internal.Value>_P)
                                                        (Data.Aeson.Encoding.Internal.closeBracket
                                                           @ Data.Aeson.Types.Internal.Value)
                                                          `cast`
                                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                             <Data.Aeson.Types.Internal.Value>_P))) })
                                          vs
                                            `cast`
                                          (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                               <Data.Aeson.Types.Internal.Value>_P)))
                                      `cast`
                                    (<[Datas.Trip]>_R
                                     ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                             Data.Aeson.Types.Internal.Value>_R
                                     ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                   <Data.Aeson.Types.Internal.Value>_P))
                                    (Data.Aeson.Encoding.Internal.empty
                                       @ Data.Aeson.Types.Internal.Value)
                                    xs)
                                   `cast`
                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Types.Internal.Value>_P)
                                 (Data.Aeson.Encoding.Internal.closeBracket
                                    @ Data.Aeson.Types.Internal.Value)
                                   `cast`
                                 (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                      <Data.Aeson.Types.Internal.Value>_P))))
                          `cast`
                        (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                  <Data.Aeson.Types.Internal.Value>_P)) }) -}
f9bf86e8af6b2cb0ac05a206af9624e7
  $sfromList :: [(Datas.Spot, a)] -> Data.Map.Base.Map Datas.Spot a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Datas.Spot, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Datas.Spot @ a
                   : ds4 ds5
                   -> case ds4 of wild1 { (,) kx x ->
                      case ds5 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { Datas.Spot ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                           Data.Map.Base.Bin
                             @ Datas.Spot
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Base.Tip @ Datas.Spot @ a)
                             (Data.Map.Base.Tip @ Datas.Spot @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds6 ->
                           case kx of ww { Datas.Spot ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                           case ky of ww9 { Datas.Spot ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                           case Datas.$w$ccompare1
                                  ww1
                                  ww3
                                  ww5
                                  ww8
                                  ww10
                                  ww12
                                  ww14
                                  ww17 of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                Main.$sfromList_$spoly_go4
                                  @ a
                                  ww10
                                  ww11
                                  ww12
                                  ww13
                                  ww14
                                  ww15
                                  ww16
                                  ww17
                                  ds6
                                  ipv1
                                  (Data.Map.Base.Bin
                                     @ Datas.Spot
                                     @ a
                                     1#
                                     ww
                                     x0
                                     (Data.Map.Base.Tip @ Datas.Spot @ a)
                                     (Data.Map.Base.Tip @ Datas.Spot @ a)) }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                Main.$sfromList_$s$wpoly_go4
                                  @ a
                                  ww10
                                  ww11
                                  ww12
                                  ww13
                                  ww14
                                  ww15
                                  ww16
                                  ww17
                                  ds6
                                  ipv1
                                  (Data.Map.Base.Bin
                                     @ Datas.Spot
                                     @ a
                                     1#
                                     ww
                                     x0
                                     (Data.Map.Base.Tip @ Datas.Spot @ a)
                                     (Data.Map.Base.Tip @ Datas.Spot @ a))
                                  1# } } } } } } } }) -}
4ae08b895ef328182193e6a4687fbaa8
  $sfromList1 :: [Datas.Trip] -> Data.Set.Base.Set Datas.Trip
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Datas.Trip]) ->
                 case ds of wild {
                   [] -> Data.Set.Base.Tip @ Datas.Trip
                   : x ds4
                   -> case ds4 of wild1 {
                        []
                        -> case x of dt { Datas.Trip ipv ipv1 ipv2 ->
                           Data.Set.Base.Bin
                             @ Datas.Trip
                             1#
                             dt
                             (Data.Set.Base.Tip @ Datas.Trip)
                             (Data.Set.Base.Tip @ Datas.Trip) }
                        : ipv ipv1
                        -> case x of ww { Datas.Trip ww1 ww2 ww3 ->
                           case ipv of ww4 { Datas.Trip ww5 ww6 ww7 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ Datas.Spot
                                  Datas.$fOrdSpot
                                  ww1
                                  ww5 of wild2 {
                             GHC.Types.LT
                             -> Main.$sfromList_$s$wgo5
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                                  (Data.Set.Base.Bin
                                     @ Datas.Trip
                                     1#
                                     ww
                                     (Data.Set.Base.Tip @ Datas.Trip)
                                     (Data.Set.Base.Tip @ Datas.Trip))
                                  1#
                             GHC.Types.EQ
                             -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww6 of wild3 {
                                  GHC.Types.LT
                                  -> Main.$sfromList_$s$wgo5
                                       ww5
                                       ww6
                                       ww7
                                       ipv1
                                       (Data.Set.Base.Bin
                                          @ Datas.Trip
                                          1#
                                          ww
                                          (Data.Set.Base.Tip @ Datas.Trip)
                                          (Data.Set.Base.Tip @ Datas.Trip))
                                       1#
                                  GHC.Types.EQ
                                  -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww3 ww7 of wild4 {
                                       DEFAULT
                                       -> Main.$sfromList_$sgo5
                                            ww5
                                            ww6
                                            ww7
                                            ipv1
                                            (Data.Set.Base.Bin
                                               @ Datas.Trip
                                               1#
                                               ww
                                               (Data.Set.Base.Tip @ Datas.Trip)
                                               (Data.Set.Base.Tip @ Datas.Trip))
                                       GHC.Types.LT
                                       -> Main.$sfromList_$s$wgo5
                                            ww5
                                            ww6
                                            ww7
                                            ipv1
                                            (Data.Set.Base.Bin
                                               @ Datas.Trip
                                               1#
                                               ww
                                               (Data.Set.Base.Tip @ Datas.Trip)
                                               (Data.Set.Base.Tip @ Datas.Trip))
                                            1# }
                                  GHC.Types.GT
                                  -> Main.$sfromList_$sgo5
                                       ww5
                                       ww6
                                       ww7
                                       ipv1
                                       (Data.Set.Base.Bin
                                          @ Datas.Trip
                                          1#
                                          ww
                                          (Data.Set.Base.Tip @ Datas.Trip)
                                          (Data.Set.Base.Tip @ Datas.Trip)) }
                             GHC.Types.GT
                             -> Main.$sfromList_$sgo5
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                                  (Data.Set.Base.Bin
                                     @ Datas.Trip
                                     1#
                                     ww
                                     (Data.Set.Base.Tip @ Datas.Trip)
                                     (Data.Set.Base.Tip @ Datas.Trip)) } } } } }) -}
1c9f7cf46903e93970ddb274bd9afc4d
  $sfromList_$s$wgo5 ::
    [Datas.Spot]
    -> [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> [Datas.Trip]
    -> Data.Set.Base.Set Datas.Trip
    -> GHC.Prim.Int#
    -> Data.Set.Base.Set Datas.Trip
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U> -}
b0bdfe7bc5e1d164331a5044d39026a0
  $sfromList_$s$wpoly_go4 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Base.Maybe (GHC.Types.Double, GHC.Types.Double)
    -> GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Double)
    -> a
    -> [(Datas.Spot, a)]
    -> Data.Map.Base.Map Datas.Spot a
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Datas.Spot a
  {- Arity: 12,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U> -}
d9f50d44476a2c785d95025475a30ad4
  $sfromList_$sgo5 ::
    [Datas.Spot]
    -> [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> [Datas.Trip]
    -> Data.Set.Base.Set Datas.Trip
    -> Data.Set.Base.Set Datas.Trip
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U> -}
881553d7f5f288afc2cd04d2f30142ca
  $sfromList_$spoly_go4 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Base.Maybe (GHC.Types.Double, GHC.Types.Double)
    -> GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Double)
    -> a
    -> [(Datas.Spot, a)]
    -> Data.Map.Base.Map Datas.Spot a
    -> Data.Map.Base.Map Datas.Spot a
  {- Arity: 11,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,1*U> -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
8b7023e9db5bb6b5ffd043cfb414d423
  $w$sgo4 ::
    GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Base.Maybe (GHC.Types.Double, GHC.Types.Double)
    -> GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.Maybe (GHC.Types.Int, GHC.Types.Double)
    -> a1
    -> Data.Map.Base.Map Datas.Spot a1
    -> Data.Map.Base.Map Datas.Spot a1
  {- Arity: 10,
     Strictness: <L,U(U)><L,U><L,U(U)><L,U><L,U(U)><L,U><L,U><L,U><S,1*U><S,1*U>,
     Inline: [0] -}
5f3e7fad2f9f8e495df2af9d32c1000d
  $w$sgo5 ::
    [Datas.Spot]
    -> GHC.Base.String
    -> GHC.Base.String
    -> Data.Set.Base.Set Datas.Trip
    -> Data.Set.Base.Set Datas.Trip
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
b0b14c9919a0ca6c289dc2e807d09eb3
  $waveSpotRemoveMatchesFrom ::
    Datas.Spot
    -> [Datas.Spot]
    -> GHC.Base.String
    -> GHC.Base.String
    -> Datas.Distance
    -> [Datas.Trip]
    -> [(Datas.Spot, Datas.Trip)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Datas.Spot, Datas.Trip, [Datas.Trip],
           [(Datas.Spot, Datas.Trip)]) #)
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U(U),U,U,U,U,U)><S,U><L,U><L,U><L,1*U(U)><L,U><L,U><S,U>,
     Inline: [0] -}
5a0d6d68f8085593b857034ef1451eff
  $waveTripRemoveMatchesFrom ::
    [Datas.Spot]
    -> Datas.Trip
    -> Datas.Distance
    -> [Datas.Trip]
    -> [(Datas.Spot, Datas.Trip)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (([Datas.Spot], Datas.Trip), [Datas.Trip],
           [(Datas.Spot, Datas.Trip)]) #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U,U)><L,U(U)><L,U><L,U><S,U>,
     Inline: [0] -}
d3d3cfc3c719fee226b770270ecceda7
  $wremoveSpots ::
    [(Datas.Spot, Datas.Trip)]
    -> [Datas.Spot]
    -> GHC.Base.String
    -> GHC.Base.String
    -> (# [Datas.Spot], GHC.Base.String, GHC.Base.String #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U><L,U>,
     Inline: [0] -}
2c2d2730bafb171898f69211dbda430f
  aveRemoving ::
    [Datas.Trip]
    -> Datas.Distance
    -> [(Datas.Spot, Datas.Trip)]
    -> GHC.Types.IO [Datas.Trip]
  {- Arity: 4, Strictness: <S,1*U><L,U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.aveRemoving1
                  `cast`
                (<[Datas.Trip]>_R
                 ->_R <Datas.Distance>_R
                 ->_R <[(Datas.Spot, Datas.Trip)]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[Datas.Trip]>_R)) -}
b79d70fc033d46942bcddbfcadb3cf78
  aveRemoving1 ::
    [Datas.Trip]
    -> Datas.Distance
    -> [(Datas.Spot, Datas.Trip)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Datas.Trip] #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U)><L,U><S,U> -}
8c05a24a661a7845592fb5c08c7ae767
  aveSpotRemoveMatchesFrom ::
    (Datas.Spot, Datas.Trip)
    -> Datas.Distance
    -> [Datas.Trip]
    -> [(Datas.Spot, Datas.Trip)]
    -> GHC.Types.IO
         (Datas.Spot, Datas.Trip, [Datas.Trip], [(Datas.Spot, Datas.Trip)])
  {- Arity: 5,
     Strictness: <S(LS(SLL)),1*U(U(U(U),U,U(U),U,U,U,U,U),1*U(U,U,U))><L,1*U(U)><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.aveSpotRemoveMatchesFrom1
                  `cast`
                (<(Datas.Spot, Datas.Trip)>_R
                 ->_R <Datas.Distance>_R
                 ->_R <[Datas.Trip]>_R
                 ->_R <[(Datas.Spot, Datas.Trip)]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(Datas.Spot, Datas.Trip, [Datas.Trip],
                                 [(Datas.Spot, Datas.Trip)])>_R)) -}
498a29b2392183bc63f8bde517ee6cc7
  aveSpotRemoveMatchesFrom1 ::
    (Datas.Spot, Datas.Trip)
    -> Datas.Distance
    -> [Datas.Trip]
    -> [(Datas.Spot, Datas.Trip)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Datas.Spot, Datas.Trip, [Datas.Trip],
           [(Datas.Spot, Datas.Trip)]) #)
  {- Arity: 5,
     Strictness: <S(LS(SLL)),1*U(U(U(U),U,U(U),U,U,U,U,U),1*U(U,U,U))><L,1*U(U)><L,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: (Datas.Spot, Datas.Trip))
                   (w1 :: Datas.Distance)
                   (w2 :: [Datas.Trip])
                   (w3 :: [(Datas.Spot, Datas.Trip)])
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { Datas.Trip ww4 ww5 ww6 ->
                 Main.$waveSpotRemoveMatchesFrom ww1 ww4 ww5 ww6 w1 w2 w3 w4 } }) -}
a0834c4d0383a6dcd70312adec3229c0
  aveTripRemoveMatchesFrom ::
    ([Datas.Spot], Datas.Trip)
    -> Datas.Distance
    -> [Datas.Trip]
    -> [(Datas.Spot, Datas.Trip)]
    -> GHC.Types.IO
         (([Datas.Spot], Datas.Trip), [Datas.Trip],
          [(Datas.Spot, Datas.Trip)])
  {- Arity: 5,
     Strictness: <S(SL),1*U(1*U,U(U,U,U))><L,U(U)><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.aveTripRemoveMatchesFrom1
                  `cast`
                (<([Datas.Spot], Datas.Trip)>_R
                 ->_R <Datas.Distance>_R
                 ->_R <[Datas.Trip]>_R
                 ->_R <[(Datas.Spot, Datas.Trip)]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(([Datas.Spot], Datas.Trip), [Datas.Trip],
                                 [(Datas.Spot, Datas.Trip)])>_R)) -}
86f0e5c8e3443ebcf8d750703f6c2ce9
  aveTripRemoveMatchesFrom1 ::
    ([Datas.Spot], Datas.Trip)
    -> Datas.Distance
    -> [Datas.Trip]
    -> [(Datas.Spot, Datas.Trip)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (([Datas.Spot], Datas.Trip), [Datas.Trip],
           [(Datas.Spot, Datas.Trip)]) #)
  {- Arity: 5,
     Strictness: <S(SL),1*U(1*U,U(U,U,U))><L,U(U)><L,U><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: ([Datas.Spot], Datas.Trip))
                   (w1 :: Datas.Distance)
                   (w2 :: [Datas.Trip])
                   (w3 :: [(Datas.Spot, Datas.Trip)])
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 Main.$waveTripRemoveMatchesFrom ww1 ww2 w1 w2 w3 w4 }) -}
83df884ad289df2ceac50d66b3ccffc6
  averageizeAllTrips ::
    [Datas.Trip]
    -> Datas.Distance -> [(Datas.Spot, Datas.Trip)] -> [Datas.Trip]
  {- Arity: 3, Strictness: <S,1*U><L,U(U)><L,U>,
     Unfolding: (\ (trips :: [Datas.Trip])
                   (d :: Datas.Distance)
                   (dat :: [(Datas.Spot, Datas.Trip)]) ->
                 GHC.Base.map
                   @ Datas.Trip
                   @ Datas.Trip
                   (\ (t :: Datas.Trip) ->
                    case t of wild { Datas.Trip ds ds4 ds5 ->
                    Datas.Trip
                      (GHC.Base.map
                         @ Datas.Spot
                         @ Datas.Spot
                         (\ (spot :: Datas.Spot) ->
                          case spot of wild1 { Datas.Spot ds6 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ->
                          let {
                            aveQ :: Datas.QRes
                            = case Lib.averageSpot (Lib.allWithinof dat wild1 d) of wild2 {
                                GHC.Base.Nothing
                                -> case Main.averageizeAllTrips2 ret_ty Datas.QRes of {}
                                GHC.Base.Just aveQ1 -> aveQ1 }
                          } in
                          let {
                            ds15 :: (GHC.Types.Double, GHC.Types.Double)
                            = case aveQ of wild2 { Datas.QRes ds16 ds17 ds18 ds19 ds20 ds21 ->
                              case ds21 of wild3 {
                                GHC.Base.Nothing -> Main.averageizeAllTrips1
                                GHC.Base.Just ds22 -> ds22 } }
                          } in
                          Datas.Spot
                            (case ds15 of ds16 { (,) newlat newlng -> newlat })
                            (case aveQ of wild2 { Datas.QRes ds16 ds17 ds18 ds19 ds20 ds21 ->
                             case ds18 of wild3 {
                               GHC.Base.Nothing -> Data.Maybe.fromJust1 @ GHC.Types.Double
                               GHC.Base.Just x -> x } })
                            (case ds15 of ds16 { (,) newlat newlng -> newlng })
                            ds10
                            ds11
                            ds12
                            ds13
                            ds14 })
                         ds)
                      ds4
                      ds5 })
                   trips) -}
662688c6c6ebb7e3dbbe33d22636867a
  averageizeAllTrips1 :: (GHC.Types.Double, GHC.Types.Double)
  {- Strictness: x -}
5476164d79104129f422d28d0ee8df4a
  averageizeAllTrips2 :: (Datas.QRes)
  {- Strictness: x -}
97586076c48648b2fff45b3d9d28d8d4
  fileLoc :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# "./trips"#) -}
f21cd2f506b16c00f7223e5fc67ae945
  fromEither :: Data.Either.Either a b -> GHC.Base.Maybe b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b (ds :: Data.Either.Either a b) ->
                 case ds of wild {
                   Data.Either.Left ds4 -> GHC.Base.Nothing @ b
                   Data.Either.Right v -> GHC.Base.Just @ b v }) -}
ef1f1d14596e3d0cbb1760423d637e46
  getTrips :: GHC.Types.IO [GHC.Base.Maybe Datas.Trip]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getTrips1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Base.Maybe Datas.Trip]>_R)) -}
3fd821b495911826828b5b4b87a2358e
  getTrips1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.Base.Maybe Datas.Trip] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Directory.getDirectoryContents1
                        Main.fileLoc
                        s of ds4 { (#,#) ipv ipv1 ->
                 Main.getTrips2 ipv1 ipv }) -}
f33f95a26be4060b66f5b1a10fcee38b
  getTrips2 ::
    [GHC.IO.FilePath]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.Base.Maybe Datas.Trip] #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (files :: [GHC.IO.FilePath])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.getTrips3 (Main.getTrips_go files) eta) -}
92fc0c6ffb34dfca7ed76e38f40582df
  getTrips3 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.Base.Maybe Datas.Trip] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
7a88e7f863f1e00dadeac6106281c512
  getTrips_go :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U> -}
270ca33c84400da74f585f971ff8aa74
  getall :: GHC.Types.IO [(Datas.Spot, Datas.Trip)]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getall1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[(Datas.Spot, Datas.Trip)]>_R)) -}
39a5e8c9df1b8796a5729d5c02e96c71
  getall1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [(Datas.Spot, Datas.Trip)] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Directory.getDirectoryContents1
                        Main.fileLoc
                        s of ds4 { (#,#) ipv ipv1 ->
                 case Main.getTrips3
                        (Main.getTrips_go ipv1)
                        ipv of ds5 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    Main.getall_$stripListToSpotList'
                      0#
                      (Data.Maybe.catMaybes1 @ Datas.Trip ipv3) #) } }) -}
1fa07d23af3e5ef9b22137f0ac7144bf
  getall_$stripListToSpotList' ::
    GHC.Prim.Int# -> [Datas.Trip] -> [(Datas.Spot, Datas.Trip)]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
bab88c60a20e8afe44c6c362f16066ed
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9dda8d2df7e89ace462504bf45b7b72e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs2 s of ds4 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Environment.getFullArgs1
                             ipv of ds5 { (#,#) ipv2 ipv3 ->
                      case System.Environment.dropRTSArgs ipv3 of wild1 {
                        []
                        -> case GHC.List.scanl2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        : ds6 xs -> Main.main2 xs ipv2 } }
                   GHC.Base.Just argv
                   -> Main.main2 (GHC.List.tail @ GHC.Base.String argv) ipv } }) -}
3acef564b052b8b04f385595f65c7d16
  main2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,U> -}
d1e561c5cbf30ac353516a682e271fcc
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d44543ccbb54163bc3fe3ecf973be461
  mkFilter ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double -> Datas.Spot -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><L,1*U(A,1*U(U),A,A,A,A,A,A)>,
     Unfolding: (\ (minSpeed :: GHC.Base.Maybe GHC.Types.Double)
                   (maxSpeed :: GHC.Base.Maybe GHC.Types.Double)
                   (eta :: Datas.Spot) ->
                 case minSpeed of wild {
                   GHC.Base.Nothing
                   -> case maxSpeed of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just p2
                        -> case eta of wild2 { Datas.Spot ds4 ds5 ds6 ds8 ds9 ds10 ds11 ds12 ->
                           case ds5 of wild3 { GHC.Types.D# x ->
                           case p2 of wild4 { GHC.Types.D# y ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=## x y) } } } }
                   GHC.Base.Just p
                   -> case maxSpeed of wild1 {
                        GHC.Base.Nothing
                        -> case eta of wild2 { Datas.Spot ds4 ds5 ds6 ds8 ds9 ds10 ds11 ds12 ->
                           case ds5 of wild3 { GHC.Types.D# x ->
                           case p of wild4 { GHC.Types.D# y ->
                           GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.>=## x y) } } }
                        GHC.Base.Just p2
                        -> case eta of wild2 { Datas.Spot ds4 ds5 ds6 ds8 ds9 ds10 ds11 ds12 ->
                           case ds5 of wild3 { GHC.Types.D# x ->
                           case p of wild4 { GHC.Types.D# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=## x y) of wild5 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case p2 of wild6 { GHC.Types.D# y1 ->
                                GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=## x y1) } } } } } } }) -}
fe725276bac3ef6f34dbcbdf4830e4d2
  removeFromTrips ::
    [(Datas.Spot, Datas.Trip)] -> [Datas.Trip] -> [Datas.Trip]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (toRemoves :: [(Datas.Spot, Datas.Trip)])
                   (trips :: [Datas.Trip]) ->
                 GHC.Base.build
                   @ Datas.Trip
                   (\ @ b1
                      (c :: Datas.Trip -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Datas.Trip
                      @ b1
                      (GHC.Base.mapFB
                         @ Datas.Trip
                         @ b1
                         @ Datas.Trip
                         c
                         (Main.removeSpots toRemoves))
                      n
                      trips)) -}
d12110651e5fc636bc92c6f46d5b4936
  removeSpots ::
    [(Datas.Spot, Datas.Trip)] -> Datas.Trip -> Datas.Trip
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [(Datas.Spot, Datas.Trip)]) (w1 :: Datas.Trip) ->
                 case w1 of ww { Datas.Trip ww1 ww2 ww3 ->
                 case Main.$wremoveSpots
                        w
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Datas.Trip ww5 ww6 ww7 } }) -}
c5ce561ddb2c8b295d7fe7c13ed46582
  removeSpots_$s$wremoveSpots ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> [Datas.Spot]
    -> Datas.Spot
    -> [Datas.Spot]
    -> [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> [(Datas.Spot, Datas.Trip)]
    -> (# [Datas.Spot], GHC.Base.String, GHC.Base.String #)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
dc9c34ec1bd47f6ac99c5dad4ae589aa
  serveIndex :: GHC.Types.IO ()
  {- Unfolding: (Web.Scotty.Trans.scottyOptsT
                   @ GHC.Types.IO
                   @ GHC.Types.IO
                   @ Data.Text.Internal.Lazy.Text
                   GHC.Base.$fMonadIO
                   Control.Monad.IO.Class.$fMonadIOIO
                   Main.serveIndex14
                   (GHC.Base.id @ (GHC.Types.IO Network.Wai.Internal.Response))
                   Main.serveIndex1
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <Web.Scotty.Internal.Types.ScottyState
                                     Data.Text.Internal.Lazy.Text GHC.Types.IO>_N
                                  <Data.Functor.Identity.Identity>_R
                                  <()>_N))
                        (Sym (Web.Scotty.Internal.Types.N:ScottyT[0]
                                  <Data.Text.Internal.Lazy.Text>_N <GHC.Types.IO>_N) <()>_N))) -}
603480dcf32e2d88ce68bec8bdb34dd4
  serveIndex1 ::
    Web.Scotty.Internal.Types.ScottyState
      Data.Text.Internal.Lazy.Text GHC.Types.IO
    -> Data.Functor.Identity.Identity
         ((),
          Web.Scotty.Internal.Types.ScottyState
            Data.Text.Internal.Lazy.Text GHC.Types.IO)
  {- Arity: 1,
     Unfolding: (\ (s1 :: Web.Scotty.Internal.Types.ScottyState
                            Data.Text.Internal.Lazy.Text GHC.Types.IO)[OneShot] ->
                 (Main.serveIndex13
                    Network.HTTP.Types.Method.GET
                    Main.serveIndex10
                    Main.serveIndex8
                      `cast`
                    (Trans
                         (<Web.Scotty.Internal.Types.ActionEnv>_R
                          ->_R Trans
                                   (<Web.Scotty.Internal.Types.ScottyResponse>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(Data.Either.Either
                                                      (Web.Scotty.Internal.Types.ActionError
                                                         Data.Text.Internal.Lazy.Text)
                                                      (),
                                                    Web.Scotty.Internal.Types.ScottyResponse)>_R))
                                   (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                             <Web.Scotty.Internal.Types.ScottyResponse>_N
                                             <GHC.Types.IO>_R
                                             <Data.Either.Either
                                                (Web.Scotty.Internal.Types.ActionError
                                                   Data.Text.Internal.Lazy.Text)
                                                ()>_N)))
                         (Trans
                              (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                        <*>_N
                                        <Web.Scotty.Internal.Types.ActionEnv>_R
                                        <Control.Monad.Trans.State.Lazy.StateT
                                           Web.Scotty.Internal.Types.ScottyResponse GHC.Types.IO>_R
                                        <Data.Either.Either
                                           (Web.Scotty.Internal.Types.ActionError
                                              Data.Text.Internal.Lazy.Text)
                                           ()>_N))
                              (Trans
                                   (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                             <Web.Scotty.Internal.Types.ActionError
                                                Data.Text.Internal.Lazy.Text>_N
                                             <Control.Monad.Trans.Reader.ReaderT
                                                Web.Scotty.Internal.Types.ActionEnv
                                                (Control.Monad.Trans.State.Lazy.StateT
                                                   Web.Scotty.Internal.Types.ScottyResponse
                                                   GHC.Types.IO)>_R
                                             <()>_N))
                                   (Sym (Web.Scotty.Internal.Types.N:ActionT[0]
                                             <Data.Text.Internal.Lazy.Text>_N
                                             <GHC.Types.IO>_R) <()>_N)))))
                   `cast`
                 (Trans
                      (Web.Scotty.Internal.Types.N:ScottyT[0]
                           <Data.Text.Internal.Lazy.Text>_N <GHC.Types.IO>_N <()>_N)
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Web.Scotty.Internal.Types.ScottyState
                              Data.Text.Internal.Lazy.Text GHC.Types.IO>_N
                           <Data.Functor.Identity.Identity>_R
                           <()>_N))
                   (case ((Main.serveIndex13
                             Network.HTTP.Types.Method.GET
                             Main.serveIndex5
                             Main.serveIndex2
                               `cast`
                             (Trans
                                  (<Web.Scotty.Internal.Types.ActionEnv>_R
                                   ->_R Trans
                                            (<Web.Scotty.Internal.Types.ScottyResponse>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(Data.Either.Either
                                                               (Web.Scotty.Internal.Types.ActionError
                                                                  Data.Text.Internal.Lazy.Text)
                                                               (),
                                                             Web.Scotty.Internal.Types.ScottyResponse)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <Web.Scotty.Internal.Types.ScottyResponse>_N
                                                      <GHC.Types.IO>_R
                                                      <Data.Either.Either
                                                         (Web.Scotty.Internal.Types.ActionError
                                                            Data.Text.Internal.Lazy.Text)
                                                         ()>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <Web.Scotty.Internal.Types.ActionEnv>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    Web.Scotty.Internal.Types.ScottyResponse
                                                    GHC.Types.IO>_R
                                                 <Data.Either.Either
                                                    (Web.Scotty.Internal.Types.ActionError
                                                       Data.Text.Internal.Lazy.Text)
                                                    ()>_N))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <Web.Scotty.Internal.Types.ActionError
                                                         Data.Text.Internal.Lazy.Text>_N
                                                      <Control.Monad.Trans.Reader.ReaderT
                                                         Web.Scotty.Internal.Types.ActionEnv
                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                            Web.Scotty.Internal.Types.ScottyResponse
                                                            GHC.Types.IO)>_R
                                                      <()>_N))
                                            (Sym (Web.Scotty.Internal.Types.N:ActionT[0]
                                                      <Data.Text.Internal.Lazy.Text>_N
                                                      <GHC.Types.IO>_R) <()>_N)))))
                            `cast`
                          (Trans
                               (Web.Scotty.Internal.Types.N:ScottyT[0]
                                    <Data.Text.Internal.Lazy.Text>_N <GHC.Types.IO>_N <()>_N)
                               (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <Web.Scotty.Internal.Types.ScottyState
                                       Data.Text.Internal.Lazy.Text GHC.Types.IO>_N
                                    <Data.Functor.Identity.Identity>_R
                                    <()>_N))
                            s1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <((),
                                Web.Scotty.Internal.Types.ScottyState
                                  Data.Text.Internal.Lazy.Text
                                  GHC.Types.IO)>_R) of wild { (,) a1 s' ->
                    s' })) -}
fa176212d7f7c0caa3a9565b76570307
  serveIndex10 :: Web.Scotty.Internal.Types.RoutePattern
  {- Unfolding: (Web.Scotty.Internal.Types.Capture
                   Main.serveIndex11) -}
5971ffa5143145848b30c30ce7f0e67f
  serveIndex11 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (case GHC.Base.map
                        @ GHC.Types.Char
                        @ GHC.Types.Char
                        Data.Text.Internal.safe
                        Main.serveIndex12 of dt { DEFAULT ->
                 Web.Scotty.Internal.Types.$fIsStringRoutePattern_outer dt }) -}
5ebf5d404fef67a591269be8963e4e58
  serveIndex12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/jsonloader.js"#) -}
f14b472d72c939c288d9d215b94c0679
  serveIndex13 ::
    Network.HTTP.Types.Method.StdMethod
    -> Web.Scotty.Internal.Types.RoutePattern
    -> Web.Scotty.Internal.Types.ActionT
         Data.Text.Internal.Lazy.Text GHC.Types.IO ()
    -> Web.Scotty.Internal.Types.ScottyT
         Data.Text.Internal.Lazy.Text GHC.Types.IO ()
  {- Unfolding: (Web.Scotty.Route.addroute
                   @ Data.Text.Internal.Lazy.Text
                   @ GHC.Types.IO
                   Web.Scotty.Internal.Types.$fScottyErrorText
                   Control.Monad.IO.Class.$fMonadIOIO) -}
6495ebda4903e9924489289b2bfccbd6
  serveIndex14 :: Web.Scotty.Internal.Types.Options
  {- Unfolding: (Web.Scotty.Internal.Types.Options
                   Web.Scotty.Internal.Types.$fDefaultOptions3
                   Main.serveIndex15) -}
8a57676f97dfad5f01bde6785ae5a514
  serveIndex15 :: Network.Wai.Handler.Warp.Settings.Settings
  {- Unfolding: (Network.Wai.Handler.Warp.Settings.Settings
                   Main.serveIndex16
                   Network.Wai.Handler.Warp.Settings.defaultSettings16
                   Network.Wai.Handler.Warp.Settings.defaultOnException1
                     `cast`
                   (<GHC.Base.Maybe Network.Wai.Internal.Request>_R
                    ->_R <GHC.Exception.SomeException>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultOnExceptionResponse
                   Network.Wai.Handler.Warp.Settings.defaultSettings14
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings13
                     `cast`
                   (<Network.Socket.Types.SockAddr>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                   (GHC.Base.Nothing @ Network.Wai.Handler.Warp.Timeout.Manager)
                   Web.Scotty.Internal.Types.$fDefaultOptions2
                   Network.Wai.Handler.Warp.Settings.defaultSettings11
                   Network.Wai.Handler.Warp.Settings.defaultSettings9
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings10
                     `cast`
                   (<(forall a. GHC.Types.IO a -> GHC.Types.IO a)
                     -> GHC.Types.IO ()>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   GHC.Types.False
                   Network.Wai.Handler.Warp.Settings.defaultSettings8
                     `cast`
                   (<GHC.Types.IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings6
                   Network.Wai.Handler.Warp.Settings.defaultSettings4
                   Network.Wai.Handler.Warp.Settings.ProxyProtocolNone
                   Network.Wai.Handler.Warp.Settings.defaultSettings3
                   GHC.Types.True
                   Network.Wai.Handler.Warp.Settings.defaultSettings2
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Network.HTTP.Types.Status.Status>_R
                    ->_R <GHC.Base.Maybe GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Network.Wai.Handler.Warp.Settings.defaultSettings1
                     `cast`
                   (<Network.Wai.Internal.Request>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <GHC.Integer.Type.Integer>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
73853c6278b5f726ecdc5d1770106eff
  serveIndex16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 80#) -}
ee7196615a0e5bd94a76bc72e4e4b995
  serveIndex2 ::
    Web.Scotty.Internal.Types.ActionEnv
    -> Web.Scotty.Internal.Types.ScottyResponse
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either
             (Web.Scotty.Internal.Types.ActionError
                Data.Text.Internal.Lazy.Text)
             (),
           Web.Scotty.Internal.Types.ScottyResponse) #)
  {- Arity: 3,
     Unfolding: (\ (w2 :: Web.Scotty.Internal.Types.ActionEnv)
                   (w3 :: Web.Scotty.Internal.Types.ScottyResponse)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    (Main.serveIndex4,
                     case w3 of wild { Web.Scotty.Internal.Types.SR ds ds4 ds5 ->
                     Web.Scotty.Internal.Types.SR ds ds4 Main.serveIndex3 }) #)) -}
1136c1c14f87cac7d7a1e24898beb714
  serveIndex3 :: Web.Scotty.Internal.Types.Content
  {- Unfolding: (Web.Scotty.Internal.Types.ContentFile
                   Main.serveIndex_w1) -}
903e3d466120b2a9081584f37e2a3290
  serveIndex4 ::
    Data.Either.Either
      (Web.Scotty.Internal.Types.ActionError
         Data.Text.Internal.Lazy.Text)
      ()
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ (Web.Scotty.Internal.Types.ActionError
                        Data.Text.Internal.Lazy.Text)
                   @ ()
                   GHC.Tuple.()) -}
59137a4e6b56b4c10efa057eb120c92a
  serveIndex5 :: Web.Scotty.Internal.Types.RoutePattern
  {- Unfolding: (Web.Scotty.Internal.Types.Capture
                   Main.serveIndex6) -}
06a47035e9dfa1f12cdb6e2769bb287d
  serveIndex6 :: Data.Text.Internal.Lazy.Text
  {- Unfolding: (case GHC.Base.map
                        @ GHC.Types.Char
                        @ GHC.Types.Char
                        Data.Text.Internal.safe
                        Main.serveIndex7 of dt { DEFAULT ->
                 Web.Scotty.Internal.Types.$fIsStringRoutePattern_outer dt }) -}
124570d92109c8a23261ff61d1eb3a99
  serveIndex7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/"#) -}
c06784ea47ae75715402d245df9f7d53
  serveIndex8 ::
    Web.Scotty.Internal.Types.ActionEnv
    -> Web.Scotty.Internal.Types.ScottyResponse
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Either.Either
             (Web.Scotty.Internal.Types.ActionError
                Data.Text.Internal.Lazy.Text)
             (),
           Web.Scotty.Internal.Types.ScottyResponse) #)
  {- Arity: 3,
     Unfolding: (\ (w2 :: Web.Scotty.Internal.Types.ActionEnv)
                   (w3 :: Web.Scotty.Internal.Types.ScottyResponse)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s,
                    (Main.serveIndex4,
                     case w3 of wild { Web.Scotty.Internal.Types.SR ds ds4 ds5 ->
                     Web.Scotty.Internal.Types.SR ds ds4 Main.serveIndex9 }) #)) -}
e56147e3239e7915358e06e3365e6d15
  serveIndex9 :: Web.Scotty.Internal.Types.Content
  {- Unfolding: (Web.Scotty.Internal.Types.ContentFile
                   Main.serveIndex_w2) -}
4895e3ff11a44293bb9b4cc0bb29887c
  serveIndex_w1 :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# "../index.html"#) -}
50041190247e3372a13262868095ab34
  serveIndex_w2 :: GHC.IO.FilePath
  {- Unfolding: (GHC.CString.unpackCString# "../jsonloader.js"#) -}
e48525417199a63615389359f8afe006
  test :: GHC.Types.IO [Datas.Trip]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.test1 `cast` (Sym (GHC.Types.N:IO[0] <[Datas.Trip]>_R)) -}
e75ea557e875af47f840c35e58bf4711
  test1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Datas.Trip] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Directory.getDirectoryContents1
                        Main.fileLoc
                        s of ds4 { (#,#) ipv ipv1 ->
                 case Main.getTrips3
                        (Main.getTrips_go ipv1)
                        ipv of ds5 { (#,#) ipv2 ipv3 ->
                 let {
                   t :: [Datas.Trip] = Data.Maybe.catMaybes1 @ Datas.Trip ipv3
                 } in
                 Main.aveRemoving1
                   t
                   Main.test2
                   (Main.getall_$stripListToSpotList' 0# t)
                   ipv2 } }) -}
1e1447140a951df9f49fd1aa319b5363
  test2 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 5.0##) -}
4f67869c08bb0371b1c890498efdbdfa
  testAverage ::
    Datas.Distance -> GHC.Types.IO (Data.Set.Base.Set Datas.Trip)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.testAverage1
                  `cast`
                (<Datas.Distance>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Data.Set.Base.Set Datas.Trip>_R)) -}
fd4ded9c5cedbf7d6a7d496f7fbaf3a9
  testAverage1 ::
    Datas.Distance
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Set.Base.Set Datas.Trip #)
  {- Arity: 2, Strictness: <L,U(U)><S,U> -}
b3b1574082fd9e5de0188586715b4fa6
  toSegments ::
    [Datas.Trip] -> (Datas.Spot -> GHC.Types.Bool) -> [Datas.Trip]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,C(U)> -}
2e19be53c8c48953500688ac74623435
  toSegments_ ::
    [Datas.Spot]
    -> Datas.Trip -> (Datas.Spot -> GHC.Types.Bool) -> [Datas.Trip]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,U(A,U,U)><L,C(U)> -}
328be148f1510e67295479457204e239
  tripListToSpotList :: [Datas.Trip] -> [Datas.Spot]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
17769943dabe32876dc5ce53743975bc
  tripListToSpotList' ::
    [Datas.Trip] -> GHC.Types.Int -> [(Datas.Spot, Datas.Trip)]
  {- Arity: 2, Strictness: <S,1*U><L,U(U)> -}
7bcfda31214885efd497af6c02338208
  writeOutAverage ::
    Datas.Distance -> GHC.IO.FilePath -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.writeOutAverage1
                  `cast`
                (<Datas.Distance>_R
                 ->_R <GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a4c88731f524473a8f381c56a54b9ace
  writeOutAverage1 ::
    Datas.Distance
    -> GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,U>,
     Unfolding: (\ (d :: Datas.Distance)
                   (f :: GHC.IO.FilePath)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.testAverage1 d eta of ds4 { (#,#) ipv ipv1 ->
                 Data.Text.Lazy.IO.writeFile1
                   f
                   (Data.Text.Lazy.Encoding.decodeUtf8With
                      Data.Text.Encoding.Error.strictDecode
                      (Data.ByteString.Builder.toLazyByteString
                         (case Data.Set.Base.$fDataSet1
                                 @ Datas.Trip
                                 (GHC.Types.[] @ Datas.Trip)
                                 ipv1 of wild {
                            []
                            -> Data.Aeson.Encoding.Builder.emptyArray_1
                                 `cast`
                               (Trans
                                    (forall (r :: <*>_N).
                                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R))
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0])))
                            : x xs
                            -> let {
                                 ds :: Data.ByteString.Builder.Internal.Builder
                                 = Data.Aeson.Encoding.Builder.encodeToBuilder
                                     (Datas.$fToJSONTrip1 x)
                                       `cast`
                                     (Data.Tagged.N:Tagged[0]
                                          <*>_N
                                          <Data.Aeson.Types.Generic.True>_P
                                          <Data.Aeson.Types.Internal.Value>_R)
                               } in
                               let {
                                 ds5 :: Data.Aeson.Encoding.Internal.Encoding'
                                          Data.Aeson.Types.Internal.Value
                                 = Main.writeOutAverage_go xs
                               } in
                               (\ @ r (eta1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                                let {
                                  w :: Data.ByteString.Builder.Internal.BuildStep r
                                  = ds `cast` (Data.ByteString.Builder.Internal.N:Builder[0])
                                      @ r
                                      (ds5
                                         `cast`
                                       (Trans
                                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P)
                                            (Data.ByteString.Builder.Internal.N:Builder[0]))
                                         @ r
                                         (Data.Aeson.Encoding.Internal.closeBracket1 @ r eta1)
                                           `cast`
                                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r>_R)))
                                } in
                                \ (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                                  (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                                Data.Aeson.Encoding.Internal.$wopenBracket @ r w ww1 ww2 w2 })
                                 `cast`
                               (Trans
                                    (forall (r :: <*>_N).
                                     <Data.ByteString.Builder.Internal.BuildStep r>_R
                                     ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                      r>_R))
                                    (Sym (Data.ByteString.Builder.Internal.N:Builder[0]))) })))
                   ipv }) -}
9448455e82fd44cb70bb3515a09ef33c
  writeOutAverage_go ::
    [Datas.Trip]
    -> Data.Aeson.Encoding.Internal.Encoding'
         Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U> -}
"SC:$wremoveSpots0" [0] forall (sc :: [GHC.Types.Char])
                               (sc1 :: [GHC.Types.Char])
                               (sc2 :: [Datas.Spot])
                               (sc3 :: Datas.Spot)
                               (sc4 :: [Datas.Spot])
                               (sc5 :: [GHC.Types.Char])
                               (sc6 :: [GHC.Types.Char])
                               (sc7 :: [(Datas.Spot, Datas.Trip)])
  Main.$wremoveSpots (GHC.Types.:
                        @ (Datas.Spot, Datas.Trip)
                        (sc3, Datas.Trip sc4 sc5 sc6)
                        sc7)
                     sc2
                     sc1
                     sc
  = Main.removeSpots_$s$wremoveSpots sc sc1 sc2 sc3 sc4 sc5 sc6 sc7
"SC:tripListToSpotList'0" [ALWAYS] forall (sc :: GHC.Prim.Int#)
                                          (sc1 :: [Datas.Trip])
  Main.tripListToSpotList' sc1 (GHC.Types.I# sc)
  = Main.getall_$stripListToSpotList' sc sc1
"SPEC/Main $fParsable[] @ Char" [ALWAYS] forall ($dParsable :: Web.Scotty.Action.Parsable
                                                                 GHC.Types.Char)
  Web.Scotty.Action.$fParsable[] @ GHC.Types.Char $dParsable
  = Main.$s$fParsable[]
"SPEC/Main $fToJSON[] @ (Maybe Trip)" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                                     (GHC.Base.Maybe Datas.Trip))
  Data.Aeson.Types.ToJSON.$fToJSON[] @ (GHC.Base.Maybe Datas.Trip)
                                     $dToJSON
  = Main.$s$fToJSON[]
"SPEC/Main $fToJSON[] @ Trip" [ALWAYS] forall ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON
                                                             Datas.Trip)
  Data.Aeson.Types.ToJSON.$fToJSON[] @ Datas.Trip $dToJSON
  = Main.$s$fToJSON[]1
"SPEC/Main fromList @ Spot _" [ALWAYS] forall @ a
                                              ($dOrd :: GHC.Classes.Ord Datas.Spot)
  Data.Map.Strict.fromList @ Datas.Spot @ a $dOrd
  = Main.$sfromList @ a
"SPEC/Main fromList @ Trip" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                        Datas.Trip)
  Data.Set.Base.fromList @ Datas.Trip $dOrd = Main.$sfromList1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

